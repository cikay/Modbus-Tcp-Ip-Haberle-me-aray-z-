<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAAAAAAAABACAAYAoAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAAAQ
        AADDDgAAww4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+Pj4Mu3t
        7TLr6+sy6+vrMuvr6zLt7e0y+vr8Mv7+/zL///8y////Mv///zL4+P8y8PD/MvLy8jLr6+sy6+vrMuvr
        6zLs7Owy9PT0Mvr6+jLv7+8y6+vrMuvr6zLr6+sy8fHxMvv7+zL7+/sy////Mv///zL///8y/f39Mvv7
        +zKQkJDvaWlp73Fxce9xcXHvcHBw74KCf++ysurvsbH/7/7+/+/////v8/P/746O/+/ExP3voqKg729v
        b+9xcXHvcXFx725ubu94eHjvpKSk72dnZ+9xcXHvcXFx73Fxce9paWnvqqqq76+vr+/////v////7///
        /+/U1NTvpqam729vb/+1tbX/4+Pj/+Hh4f/g4OD/5eXg/6Wl+v8zM///srL///X1//+EhP//h4f///X1
        ///s7Ov/4eHh/+Hh4f/h4eH/2tra/3Fxcf99fX3/nZ2d/+Hh4f/d3d3/4ODg/4ODg/+Dg4P/i4uL////
        /////////////8HBwf9+fn7/dHR0/7W1tf+np6f/oaGh/7+/v/////7/rKz//4KC//9wcP//W1v//4uL
        ///39//////+/8DAwP+goKD/oqKi/6Ojo/+dnZ3/YGBg/39/f/+1tbX/////////////////lpaW/4OD
        g/+Li4v/////////////////wcHB/35+fv90dHT/uLi4/7Kysv+srKz/x8fH/////v+rq///oaH//+bm
        //9aWv//p6f////////7+/v/bW1t/5aWlv+vr6//ra2t/62trf++vr7/kZGR/7S0tP//////////////
        //+Wlpb/g4OD/4yMjP/////////////////BwcH/fn5+/25ubv+tra3/2tra/9jY2P/W1tb/3NzY/6Sk
        +f+goP///////+Pj//9ra///rKz///n5+v9zc3L/vLy8/9nZ2f/Y2Nj/19fX/+Li4v+Tk5P/lZWV/9fX
        1//U1NT/1tbW/35+fv+Dg4P/dnZ2/9XV1f/U1NT/19fX/6CgoP98fHz/mZmZ73Jycu94eHjvd3d373d3
        d++Hh4Xvtrbr78TE/+/////v////79/f/++Pj//v5+f975iYl+9ycnLveHh473d3d+92dnbvkJCQ76+v
        r+9wcHDveHh473d3d+94eHjvc3Nz77S0tO92dnbvd3d373d3d+94eHjvcXFx76enp+////8y/f39Mvz8
        /DL8/Pwy/Pz8Mvz8/DL///8y////Mv///zL///8y////Mvv7/zL7+/8y////Mvz8/DL8/Pwy/Pz8Mvz8
        /DL9/f0y////Mv39/TL8/Pwy/Pz8Mvz8/DL+/v4y////Mv7+/jL8/Pwy/Pz8Mvz8/DL9/f0y////MgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////
        /////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////
        ////////////////////////////////////////////////////////iVBORw0KGgoAAAANSUhEUgAA
        AQAAAAEACAYAAABccqhmAAAKJ0lEQVR42u3dW2wUVRzH8d+2SykNpBdIQMzSGiDQB0gIwYQHSLiEgiBR
        RB4gTRAVUMQL4BUDDyKKwQehFkvVvpAoCjaiqG8EA4FAwAeCARIJBWy33Npya6GX8WEytrud7c5u250Z
        9vtJTJYzu+N/uvP/zzlnLisBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgCQHDMAy3gwDg
        jgy3AwDgHgoAkMaCXf/R0tKi1tZWt2NKSHZ2tgYMGBDZ+PCh9OBBZFtGhpSTIwUC7gTa2iq1tNgvMwwp
        K0vKzo758QcPHujhw4fuxJ6kgQMHKisrK6Ktra1Nzc3NboeWkGAwqEGDBkW0dXR06P79+/LTCDojI0M5
        OTkKdMmBiAKwfft2HThwwO04E7J582bNnz8/srG6Wvr888i2wkJp924pPz/1QdbXS5s2SX/91X2ZYUjD
        h0sffSRNmhRzFRUVFdqzZ0/qY++FtWvXqrS0NKLt0KFD2rRpk9rb290Oz7EZM2Zo69atyszM/L/t8uXL
        WrlypRobG90Oz7HRo0ervLxc+V1yIKIAXLx4USdPnnQ7zoTcuHGje2M4LEVvR2OjeRROtfp66a23pO++
        s18+bJj05pvShAk9rqampsZ3301tbW23tps3b+r48eNuh5aQkSNHdmtrbm7WqVOndOvWLbfDc+zevXtq
        a2uLaIuYA8jI8NeUQCAQiOjOdFnQvc2NbauvN5P7++/tlw8fLpWVSUuXSsFgj6vy23cjyfa7CQQCCsbZ
        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
</value>
  </data>
</root>